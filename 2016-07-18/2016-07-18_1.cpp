/*// 객체 배열

// 구조체, 클래스 : 연속된 메모리 공간에 데이터의 집합

// 배열 : 연속된 메모리 공간에 '같은 타입' 의 데이터의 집합
// 1) 인덱스를 통한 접근이 가능하다
// 2) 한번 크기가 정해지면 절대 바꿀 수 없다
//	  ==> 해결책 : 동적배열(malloc, new), 연결 리스트
// 3) 배열은 포인터 ==> 배열의 이름은 배열의 시작 주소값이다

//	ex) int pArray[5];
//	[ ][ ][ ][ ][ ]
//
// ex) char Array[5];

#include <iostream>

using namespace std;

#define SIZE 100

void main()
{
	int size = 10;
	int buf[SIZE];
//	int buf[size];	// 배열의 크기는 상수값만 가능하다 (C, C++ 만)

	int p[5] = {0};
	printf("p 의 주소 = %p\n",p);
	printf("p+1 의 주소 = %p\n",p+1);	// 포인터 연산
	printf("p+100 의 주소 = %p\n",p+100);	// 포인터 연산

	int pt[3][4] = {{1,2,3,4,},
					{5,6,7,8,},
					{9,10,11,12}};
	// 8을 출력하는 방법
	// 1) 인텍스를 이용하는 방법
	printf("%d\n",pt[1][3]);
	// 2) 포인터를 이용하는 방법
	printf("%d\n",*(*(pt+1)+3));
	// 3) 혼합
	printf("%d\n",*(pt[1]+3));
	printf("%d\n",(*(pt+1))[3]);
}*/